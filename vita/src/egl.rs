#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(unused)]
/* automatically generated by rust-bindgen 0.70.1 */

pub const KHRONOS_SUPPORT_INT64: u32 = 1;
pub const KHRONOS_SUPPORT_FLOAT: u32 = 1;
pub const KHRONOS_MAX_ENUM: u32 = 2147483647;
pub const EGL_EGL_PROTOTYPES: u32 = 1;
pub const EGL_VERSION_1_0: u32 = 1;
pub const EGL_ALPHA_SIZE: u32 = 12321;
pub const EGL_BAD_ACCESS: u32 = 12290;
pub const EGL_BAD_ALLOC: u32 = 12291;
pub const EGL_BAD_ATTRIBUTE: u32 = 12292;
pub const EGL_BAD_CONFIG: u32 = 12293;
pub const EGL_BAD_CONTEXT: u32 = 12294;
pub const EGL_BAD_CURRENT_SURFACE: u32 = 12295;
pub const EGL_BAD_DISPLAY: u32 = 12296;
pub const EGL_BAD_MATCH: u32 = 12297;
pub const EGL_BAD_NATIVE_PIXMAP: u32 = 12298;
pub const EGL_BAD_NATIVE_WINDOW: u32 = 12299;
pub const EGL_BAD_PARAMETER: u32 = 12300;
pub const EGL_BAD_SURFACE: u32 = 12301;
pub const EGL_BLUE_SIZE: u32 = 12322;
pub const EGL_BUFFER_SIZE: u32 = 12320;
pub const EGL_CONFIG_CAVEAT: u32 = 12327;
pub const EGL_CONFIG_ID: u32 = 12328;
pub const EGL_CORE_NATIVE_ENGINE: u32 = 12379;
pub const EGL_DEPTH_SIZE: u32 = 12325;
pub const EGL_DRAW: u32 = 12377;
pub const EGL_EXTENSIONS: u32 = 12373;
pub const EGL_FALSE: u32 = 0;
pub const EGL_GREEN_SIZE: u32 = 12323;
pub const EGL_HEIGHT: u32 = 12374;
pub const EGL_LARGEST_PBUFFER: u32 = 12376;
pub const EGL_LEVEL: u32 = 12329;
pub const EGL_MAX_PBUFFER_HEIGHT: u32 = 12330;
pub const EGL_MAX_PBUFFER_PIXELS: u32 = 12331;
pub const EGL_MAX_PBUFFER_WIDTH: u32 = 12332;
pub const EGL_NATIVE_RENDERABLE: u32 = 12333;
pub const EGL_NATIVE_VISUAL_ID: u32 = 12334;
pub const EGL_NATIVE_VISUAL_TYPE: u32 = 12335;
pub const EGL_NONE: u32 = 12344;
pub const EGL_NON_CONFORMANT_CONFIG: u32 = 12369;
pub const EGL_NOT_INITIALIZED: u32 = 12289;
pub const EGL_PBUFFER_BIT: u32 = 1;
pub const EGL_PIXMAP_BIT: u32 = 2;
pub const EGL_READ: u32 = 12378;
pub const EGL_RED_SIZE: u32 = 12324;
pub const EGL_SAMPLES: u32 = 12337;
pub const EGL_SAMPLE_BUFFERS: u32 = 12338;
pub const EGL_SLOW_CONFIG: u32 = 12368;
pub const EGL_STENCIL_SIZE: u32 = 12326;
pub const EGL_SUCCESS: u32 = 12288;
pub const EGL_SURFACE_TYPE: u32 = 12339;
pub const EGL_TRANSPARENT_BLUE_VALUE: u32 = 12341;
pub const EGL_TRANSPARENT_GREEN_VALUE: u32 = 12342;
pub const EGL_TRANSPARENT_RED_VALUE: u32 = 12343;
pub const EGL_TRANSPARENT_RGB: u32 = 12370;
pub const EGL_TRANSPARENT_TYPE: u32 = 12340;
pub const EGL_TRUE: u32 = 1;
pub const EGL_VENDOR: u32 = 12371;
pub const EGL_VERSION: u32 = 12372;
pub const EGL_WIDTH: u32 = 12375;
pub const EGL_WINDOW_BIT: u32 = 4;
pub const EGL_VERSION_1_1: u32 = 1;
pub const EGL_BACK_BUFFER: u32 = 12420;
pub const EGL_BIND_TO_TEXTURE_RGB: u32 = 12345;
pub const EGL_BIND_TO_TEXTURE_RGBA: u32 = 12346;
pub const EGL_CONTEXT_LOST: u32 = 12302;
pub const EGL_MIN_SWAP_INTERVAL: u32 = 12347;
pub const EGL_MAX_SWAP_INTERVAL: u32 = 12348;
pub const EGL_MIPMAP_TEXTURE: u32 = 12418;
pub const EGL_MIPMAP_LEVEL: u32 = 12419;
pub const EGL_NO_TEXTURE: u32 = 12380;
pub const EGL_TEXTURE_2D: u32 = 12383;
pub const EGL_TEXTURE_FORMAT: u32 = 12416;
pub const EGL_TEXTURE_RGB: u32 = 12381;
pub const EGL_TEXTURE_RGBA: u32 = 12382;
pub const EGL_TEXTURE_TARGET: u32 = 12417;
pub const EGL_VERSION_1_2: u32 = 1;
pub const EGL_ALPHA_FORMAT: u32 = 12424;
pub const EGL_ALPHA_FORMAT_NONPRE: u32 = 12427;
pub const EGL_ALPHA_FORMAT_PRE: u32 = 12428;
pub const EGL_ALPHA_MASK_SIZE: u32 = 12350;
pub const EGL_BUFFER_PRESERVED: u32 = 12436;
pub const EGL_BUFFER_DESTROYED: u32 = 12437;
pub const EGL_CLIENT_APIS: u32 = 12429;
pub const EGL_COLORSPACE: u32 = 12423;
pub const EGL_COLORSPACE_sRGB: u32 = 12425;
pub const EGL_COLORSPACE_LINEAR: u32 = 12426;
pub const EGL_COLOR_BUFFER_TYPE: u32 = 12351;
pub const EGL_CONTEXT_CLIENT_TYPE: u32 = 12439;
pub const EGL_DISPLAY_SCALING: u32 = 10000;
pub const EGL_HORIZONTAL_RESOLUTION: u32 = 12432;
pub const EGL_LUMINANCE_BUFFER: u32 = 12431;
pub const EGL_LUMINANCE_SIZE: u32 = 12349;
pub const EGL_OPENGL_ES_BIT: u32 = 1;
pub const EGL_OPENVG_BIT: u32 = 2;
pub const EGL_OPENGL_ES_API: u32 = 12448;
pub const EGL_OPENVG_API: u32 = 12449;
pub const EGL_OPENVG_IMAGE: u32 = 12438;
pub const EGL_PIXEL_ASPECT_RATIO: u32 = 12434;
pub const EGL_RENDERABLE_TYPE: u32 = 12352;
pub const EGL_RENDER_BUFFER: u32 = 12422;
pub const EGL_RGB_BUFFER: u32 = 12430;
pub const EGL_SINGLE_BUFFER: u32 = 12421;
pub const EGL_SWAP_BEHAVIOR: u32 = 12435;
pub const EGL_VERTICAL_RESOLUTION: u32 = 12433;
pub const EGL_VERSION_1_3: u32 = 1;
pub const EGL_CONFORMANT: u32 = 12354;
pub const EGL_CONTEXT_CLIENT_VERSION: u32 = 12440;
pub const EGL_MATCH_NATIVE_PIXMAP: u32 = 12353;
pub const EGL_OPENGL_ES2_BIT: u32 = 4;
pub const EGL_VG_ALPHA_FORMAT: u32 = 12424;
pub const EGL_VG_ALPHA_FORMAT_NONPRE: u32 = 12427;
pub const EGL_VG_ALPHA_FORMAT_PRE: u32 = 12428;
pub const EGL_VG_ALPHA_FORMAT_PRE_BIT: u32 = 64;
pub const EGL_VG_COLORSPACE: u32 = 12423;
pub const EGL_VG_COLORSPACE_sRGB: u32 = 12425;
pub const EGL_VG_COLORSPACE_LINEAR: u32 = 12426;
pub const EGL_VG_COLORSPACE_LINEAR_BIT: u32 = 32;
pub const EGL_VERSION_1_4: u32 = 1;
pub const EGL_MULTISAMPLE_RESOLVE_BOX_BIT: u32 = 512;
pub const EGL_MULTISAMPLE_RESOLVE: u32 = 12441;
pub const EGL_MULTISAMPLE_RESOLVE_DEFAULT: u32 = 12442;
pub const EGL_MULTISAMPLE_RESOLVE_BOX: u32 = 12443;
pub const EGL_OPENGL_API: u32 = 12450;
pub const EGL_OPENGL_BIT: u32 = 8;
pub const EGL_SWAP_BEHAVIOR_PRESERVED_BIT: u32 = 1024;
pub const EGL_VERSION_1_5: u32 = 1;
pub const EGL_CONTEXT_MAJOR_VERSION: u32 = 12440;
pub const EGL_CONTEXT_MINOR_VERSION: u32 = 12539;
pub const EGL_CONTEXT_OPENGL_PROFILE_MASK: u32 = 12541;
pub const EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY: u32 = 12733;
pub const EGL_NO_RESET_NOTIFICATION: u32 = 12734;
pub const EGL_LOSE_CONTEXT_ON_RESET: u32 = 12735;
pub const EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT: u32 = 1;
pub const EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT: u32 = 2;
pub const EGL_CONTEXT_OPENGL_DEBUG: u32 = 12720;
pub const EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE: u32 = 12721;
pub const EGL_CONTEXT_OPENGL_ROBUST_ACCESS: u32 = 12722;
pub const EGL_OPENGL_ES3_BIT: u32 = 64;
pub const EGL_CL_EVENT_HANDLE: u32 = 12444;
pub const EGL_SYNC_CL_EVENT: u32 = 12542;
pub const EGL_SYNC_CL_EVENT_COMPLETE: u32 = 12543;
pub const EGL_SYNC_PRIOR_COMMANDS_COMPLETE: u32 = 12528;
pub const EGL_SYNC_TYPE: u32 = 12535;
pub const EGL_SYNC_STATUS: u32 = 12529;
pub const EGL_SYNC_CONDITION: u32 = 12536;
pub const EGL_SIGNALED: u32 = 12530;
pub const EGL_UNSIGNALED: u32 = 12531;
pub const EGL_SYNC_FLUSH_COMMANDS_BIT: u32 = 1;
pub const EGL_FOREVER: i32 = -1;
pub const EGL_TIMEOUT_EXPIRED: u32 = 12533;
pub const EGL_CONDITION_SATISFIED: u32 = 12534;
pub const EGL_SYNC_FENCE: u32 = 12537;
pub const EGL_GL_COLORSPACE: u32 = 12445;
pub const EGL_GL_COLORSPACE_SRGB: u32 = 12425;
pub const EGL_GL_COLORSPACE_LINEAR: u32 = 12426;
pub const EGL_GL_RENDERBUFFER: u32 = 12473;
pub const EGL_GL_TEXTURE_2D: u32 = 12465;
pub const EGL_GL_TEXTURE_LEVEL: u32 = 12476;
pub const EGL_GL_TEXTURE_3D: u32 = 12466;
pub const EGL_GL_TEXTURE_ZOFFSET: u32 = 12477;
pub const EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X: u32 = 12467;
pub const EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X: u32 = 12468;
pub const EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y: u32 = 12469;
pub const EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y: u32 = 12470;
pub const EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z: u32 = 12471;
pub const EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z: u32 = 12472;
pub const EGL_IMAGE_PRESERVED: u32 = 12498;
pub const EGL_DONT_CARE: u32 = 0xffff_ffff;

pub type khronos_int32_t = i32;
pub type khronos_uint32_t = u32;
pub type khronos_int64_t = i64;
pub type khronos_uint64_t = u64;
pub type khronos_int8_t = ::std::os::raw::c_schar;
pub type khronos_uint8_t = ::std::os::raw::c_uchar;
pub type khronos_int16_t = ::std::os::raw::c_short;
pub type khronos_uint16_t = ::std::os::raw::c_ushort;
pub type khronos_intptr_t = ::std::os::raw::c_long;
pub type khronos_uintptr_t = ::std::os::raw::c_ulong;
pub type khronos_ssize_t = ::std::os::raw::c_long;
pub type khronos_usize_t = ::std::os::raw::c_ulong;
pub type khronos_float_t = f32;
pub type khronos_utime_nanoseconds_t = khronos_uint64_t;
pub type khronos_stime_nanoseconds_t = khronos_int64_t;

pub type khronos_boolean_enum_t = ::std::os::raw::c_uint;
pub type EGLNativeDisplayType = *mut ::std::os::raw::c_void;
pub type EGLNativePixmapType = khronos_uintptr_t;
pub type EGLNativeWindowType = khronos_uintptr_t;
pub type NativeDisplayType = EGLNativeDisplayType;
pub type NativePixmapType = EGLNativePixmapType;
pub type NativeWindowType = EGLNativeWindowType;
pub type EGLint = khronos_int32_t;
pub type EGLBoolean = bool;
pub type EGLDisplay = *mut ::std::os::raw::c_void;
pub type EGLConfig = *mut ::std::os::raw::c_void;
pub type EGLSurface = *mut ::std::os::raw::c_void;
pub type EGLContext = *mut ::std::os::raw::c_void;
pub type EGLenum = ::std::os::raw::c_uint;
pub type EGLClientBuffer = *mut ::std::os::raw::c_void;
pub type EGLSync = *mut ::std::os::raw::c_void;
pub type EGLAttrib = isize;
pub type EGLTime = khronos_utime_nanoseconds_t;
pub type EGLImage = *mut ::std::os::raw::c_void;

pub type __eglMustCastToProperFunctionPointerType = ::std::option::Option<unsafe extern "C" fn()>;


#[link(name = "IMGEGL_stub", kind = "static")]
extern "C" {
    pub fn eglChooseConfig(
        dpy: EGLDisplay,
        attrib_list: *const EGLint,
        configs: *mut EGLConfig,
        config_size: EGLint,
        num_config: *mut EGLint,
    ) -> EGLBoolean;
    pub fn eglCopyBuffers(
        dpy: EGLDisplay,
        surface: EGLSurface,
        target: EGLNativePixmapType,
    ) -> EGLBoolean;
    pub fn eglCreateContext(
        dpy: EGLDisplay,
        config: EGLConfig,
        share_context: EGLContext,
        attrib_list: *const EGLint,
    ) -> EGLContext;
    pub fn eglCreatePbufferSurface(
        dpy: EGLDisplay,
        config: EGLConfig,
        attrib_list: *const EGLint,
    ) -> EGLSurface;
    pub fn eglCreatePixmapSurface(
        dpy: EGLDisplay,
        config: EGLConfig,
        pixmap: EGLNativePixmapType,
        attrib_list: *const EGLint,
    ) -> EGLSurface;
    pub fn eglCreateWindowSurface(
        dpy: EGLDisplay,
        config: EGLConfig,
        win: EGLNativeWindowType,
        attrib_list: *const EGLint,
    ) -> EGLSurface;
    pub fn eglDestroyContext(dpy: EGLDisplay, ctx: EGLContext) -> EGLBoolean;
    pub fn eglDestroySurface(dpy: EGLDisplay, surface: EGLSurface) -> EGLBoolean;
    pub fn eglGetConfigAttrib(
        dpy: EGLDisplay,
        config: EGLConfig,
        attribute: EGLint,
        value: *mut EGLint,
    ) -> EGLBoolean;
    pub fn eglGetConfigs(
        dpy: EGLDisplay,
        configs: *mut EGLConfig,
        config_size: EGLint,
        num_config: *mut EGLint,
    ) -> EGLBoolean;
    pub fn eglGetCurrentDisplay() -> EGLDisplay;
    pub fn eglGetCurrentSurface(readdraw: EGLint) -> EGLSurface;
    pub fn eglGetDisplay(display_id: EGLNativeDisplayType) -> EGLDisplay;
    pub fn eglGetError() -> EGLint;
    pub fn eglGetProcAddress(
        procname: *const ::std::os::raw::c_char,
    ) -> *const std::os::raw::c_void;
    pub fn eglInitialize(dpy: EGLDisplay, major: *mut EGLint, minor: *mut EGLint) -> EGLBoolean;
    pub fn eglMakeCurrent(
        dpy: EGLDisplay,
        draw: EGLSurface,
        read: EGLSurface,
        ctx: EGLContext,
    ) -> EGLBoolean;
    pub fn eglQueryContext(
        dpy: EGLDisplay,
        ctx: EGLContext,
        attribute: EGLint,
        value: *mut EGLint,
    ) -> EGLBoolean;
    pub fn eglQueryString(dpy: EGLDisplay, name: EGLint) -> *const ::std::os::raw::c_char;
    pub fn eglQuerySurface(
        dpy: EGLDisplay,
        surface: EGLSurface,
        attribute: EGLint,
        value: *mut EGLint,
    ) -> EGLBoolean;
    pub fn eglSwapBuffers(dpy: EGLDisplay, surface: EGLSurface) -> EGLBoolean;
    pub fn eglTerminate(dpy: EGLDisplay) -> EGLBoolean;
    pub fn eglWaitGL() -> EGLBoolean;
    pub fn eglWaitNative(engine: EGLint) -> EGLBoolean;
    pub fn eglBindTexImage(dpy: EGLDisplay, surface: EGLSurface, buffer: EGLint) -> EGLBoolean;
    pub fn eglReleaseTexImage(dpy: EGLDisplay, surface: EGLSurface, buffer: EGLint) -> EGLBoolean;
    pub fn eglSurfaceAttrib(
        dpy: EGLDisplay,
        surface: EGLSurface,
        attribute: EGLint,
        value: EGLint,
    ) -> EGLBoolean;
    pub fn eglSwapInterval(dpy: EGLDisplay, interval: EGLint) -> EGLBoolean;
    pub fn eglBindAPI(api: EGLenum) -> EGLBoolean;
    pub fn eglQueryAPI() -> EGLenum;
    pub fn eglCreatePbufferFromClientBuffer(
        dpy: EGLDisplay,
        buftype: EGLenum,
        buffer: EGLClientBuffer,
        config: EGLConfig,
        attrib_list: *const EGLint,
    ) -> EGLSurface;
    pub fn eglReleaseThread() -> EGLBoolean;
    pub fn eglWaitClient() -> EGLBoolean;
    pub fn eglGetCurrentContext() -> EGLContext;
    pub fn eglCreateSync(dpy: EGLDisplay, type_: EGLenum, attrib_list: *const EGLAttrib)
        -> EGLSync;
    pub fn eglDestroySync(dpy: EGLDisplay, sync: EGLSync) -> EGLBoolean;
    pub fn eglClientWaitSync(
        dpy: EGLDisplay,
        sync: EGLSync,
        flags: EGLint,
        timeout: EGLTime,
    ) -> EGLint;
    pub fn eglGetSyncAttrib(
        dpy: EGLDisplay,
        sync: EGLSync,
        attribute: EGLint,
        value: *mut EGLAttrib,
    ) -> EGLBoolean;
    pub fn eglCreateImage(
        dpy: EGLDisplay,
        ctx: EGLContext,
        target: EGLenum,
        buffer: EGLClientBuffer,
        attrib_list: *const EGLAttrib,
    ) -> EGLImage;
    pub fn eglDestroyImage(dpy: EGLDisplay, image: EGLImage) -> EGLBoolean;
    pub fn eglGetPlatformDisplay(
        platform: EGLenum,
        native_display: *mut ::std::os::raw::c_void,
        attrib_list: *const EGLAttrib,
    ) -> EGLDisplay;
    pub fn eglCreatePlatformWindowSurface(
        dpy: EGLDisplay,
        config: EGLConfig,
        native_window: *mut ::std::os::raw::c_void,
        attrib_list: *const EGLAttrib,
    ) -> EGLSurface;
    pub fn eglCreatePlatformPixmapSurface(
        dpy: EGLDisplay,
        config: EGLConfig,
        native_pixmap: *mut ::std::os::raw::c_void,
        attrib_list: *const EGLAttrib,
    ) -> EGLSurface;
    pub fn eglWaitSync(dpy: EGLDisplay, sync: EGLSync, flags: EGLint) -> EGLBoolean;
}
